package iotc.gui;

import iotc.db.*;
import iotc.event.DBEventListener;
import iotc.event.DBEventListenerManager;
import java.io.Serializable;
import java.util.EnumSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.TableColumn;
import org.hibernate.*;
import org.reflections.Reflections;

/**
 * ユーザの管理ウインドウ
 * @author atsushi-o
 */
public class UserWindow extends javax.swing.JFrame implements DBEventListener {
    enum Mode {
        SELECTING,
        EDITING
    }

    private EnumSet<Mode> currentMode;
    private static final Logger LOG;
    static {
        LOG = Logger.getLogger(UserWindow.class.getName());
    }

    /**
     * Creates new form UserWindow
     */
    public UserWindow() {
        initComponents();
        currentMode = EnumSet.noneOf(Mode.class);
        DBEventListenerManager.getInstance().addListener(this, "User|Power");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        aliasTableMenu = new javax.swing.JPopupMenu();
        addRow = new javax.swing.JMenuItem();
        delRow = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<User>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        powerCombo = new javax.swing.JComboBox(PowerEnum.values());
        jLabel4 = new javax.swing.JLabel();
        prevPowerCombo = new javax.swing.JComboBox(PowerEnum.values());
        jLabel5 = new javax.swing.JLabel();
        typeCombo = new javax.swing.JComboBox(PowerType.values());
        jLabel6 = new javax.swing.JLabel();
        periodField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        authField = new javax.swing.JTextField();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        aliasTable = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        addRow.setText("Add");
        addRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowActionPerformed(evt);
            }
        });
        aliasTableMenu.add(addRow);

        delRow.setText("Delete");
        delRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delRowActionPerformed(evt);
            }
        });
        aliasTableMenu.add(delRow);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Users - IoTConnector");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        userList.setModel(new javax.swing.DefaultListModel<User>());
        userList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        userList.setCellRenderer(new javax.swing.DefaultListCellRenderer(){
            @Override
            public java.awt.Component getListCellRendererComponent(javax.swing.JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof User) {
                    setText(((User)value).getName());
                }
                return this;
            }
        });
        userList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(userList);
        loadUsers();

        jLabel1.setText("Name");

        jLabel2.setText("Alias");

        jLabel3.setText("Power");

        powerCombo.setEditor(null);

        jLabel4.setText("PrevPower");

        prevPowerCombo.setEditor(null);
        prevPowerCombo.setEnabled(false);

        jLabel5.setText("Type");

        typeCombo.setEditor(null);
        typeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboActionPerformed(evt);
            }
        });

        jLabel6.setText("Period");

        periodField.setEditable(false);

        jLabel7.setText("AuthBy");

        authField.setEditable(false);

        editButton.setText("Edit");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("-");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jScrollPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                aliasTableMouseReleased(evt);
            }
        });

        aliasTable.setModel(new AliasTableModel());
        aliasTable.setColumnSelectionAllowed(true);
        aliasTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        aliasTable.getTableHeader().setReorderingAllowed(false);
        TableColumn tc = aliasTable.getColumnModel().getColumn(0);
        tc.setCellEditor(new DefaultCellEditor(getMediumCombo()));
        aliasTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                aliasTableMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(aliasTable);
        aliasTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(powerCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(prevPowerCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(typeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(periodField)
                            .addComponent(authField, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(powerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(prevPowerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(typeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(periodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(authField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton)
                    .addComponent(deleteButton)
                    .addComponent(addButton))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_userListValueChanged
        if (evt.getValueIsAdjusting()) return;
        if (userList.getModel().getSize() == 0 || userList.isSelectionEmpty()) return;
        Session s = HibernateUtil.getSessionFactory().getCurrentSession();
        s.beginTransaction();
        User u = (User)s.load(User.class, userList.getSelectedValue().getId());
        Power p = u.getPowerForUserId();

        // Update field
        nameField.setText(u.getName());
        AliasTableModel model = (AliasTableModel)aliasTable.getModel();
        model.clearAllAlias();
        model.addAliasMap(u.getAliasMap());
        powerCombo.setSelectedItem(PowerEnum.valueOf(p.getPower()));
        prevPowerCombo.setSelectedItem(PowerEnum.valueOf(p.getPrevPower()));
        typeCombo.setSelectedItem(PowerType.valueOf(p.getType()));
        periodField.setText(p.getPeriod()!=null?String.valueOf(p.getPeriod()):"");
        User auth = p.getUserByAuthBy();
        authField.setText(auth != null?String.valueOf(auth.getId()):"");

        s.getTransaction().commit();

        // Update field state
        changeEditable(false);
        addButton.setEnabled(true);
        editButton.setEnabled(true);
        editButton.setText("Edit");
        deleteButton.setEnabled(true);

        currentMode.clear();
        currentMode.add(Mode.SELECTING);
    }//GEN-LAST:event_userListValueChanged

    private void aliasTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aliasTableMouseReleased
        if (!currentMode.contains(Mode.EDITING)) return;
        if (SwingUtilities.isRightMouseButton(evt)) {
            int row = aliasTable.rowAtPoint(evt.getPoint());
            ListSelectionModel model = aliasTable.getSelectionModel();
            if (row >= 0) {
                delRow.setEnabled(true);
                model.setSelectionInterval(row, row);
            } else {
                delRow.setEnabled(false);
            }
            aliasTableMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_aliasTableMouseReleased

    private void addRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowActionPerformed
        AliasTableModel model = (AliasTableModel)aliasTable.getModel();
        model.addRow(new Object[0]);
    }//GEN-LAST:event_addRowActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Set default value
        nameField.setText("");
        ((AliasTableModel)aliasTable.getModel()).clearAllAlias();
        powerCombo.setSelectedItem(PowerEnum.ANONYMOUS);
        typeCombo.setSelectedItem(PowerType.BASIC);

        changeEditable(true);
        editButton.setText("Save");
        editButton.setEnabled(true);
        currentMode.clear();
        currentMode.add(Mode.EDITING);
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if (!currentMode.contains(Mode.SELECTING)) return;
        if (JOptionPane.showConfirmDialog(this, "Delete anyway?", "IoTConnector", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE) != JOptionPane.OK_OPTION) return;

        Session s = HibernateUtil.getSessionFactory().getCurrentSession();
        try {
            s.beginTransaction();
            User u = (User)s.load(User.class, userList.getSelectedValue().getId());
            s.delete(u);
            s.getTransaction().commit();
        } catch (HibernateException ex) {
            LOG.log(Level.WARNING, "Delete user failed", ex);
            JOptionPane.showMessageDialog(this, "User delete failed.\n" + ex.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            s.getTransaction().rollback();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if (currentMode.contains(Mode.EDITING)) {
            if (nameField.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "User name is required", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Session s = HibernateUtil.getSessionFactory().getCurrentSession();
            Transaction t = s.beginTransaction();
            User u;
            Power p;
            if (currentMode.contains(Mode.SELECTING)) {
                u = (User)s.load(User.class, userList.getSelectedValue().getId());
                p = u.getPowerForUserId();
            } else {
                u = new User();
                p = new Power();
            }

            u.setName(nameField.getText());
            u.setAliasName(((AliasTableModel)aliasTable.getModel()).getAliasAsString());
            if (currentMode.contains(Mode.SELECTING)) {
                if (p.getPower() != powerCombo.getItemAt(powerCombo.getSelectedIndex()).getId()) {
                    p.setPrevPower(p.getPower());
                }
            }
            p.setPower(powerCombo.getItemAt(powerCombo.getSelectedIndex()).getId());
            p.setType(typeCombo.getItemAt(typeCombo.getSelectedIndex()).getId());
            p.setPeriod(!periodField.getText().equals("")?Integer.valueOf(periodField.getText()):null);

            try {
                if (currentMode.contains(Mode.SELECTING)) {
                    s.update(u);
                    s.update(p);
                } else {
                    Serializable id = s.save(u);
                    p.setUserId((int)id);
                    s.save(p);
                }
                t.commit();
            } catch (HibernateException ex) {
                LOG.log(Level.WARNING, "User update failed", ex);
                JOptionPane.showMessageDialog(this, "User update failed.\n" + ex.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                t.rollback();
                return;
            }

            changeEditable(false);
            addButton.setEnabled(true);
            deleteButton.setEnabled(true);
            editButton.setText("Edit");
            currentMode.remove(Mode.EDITING);
        } else {
            currentMode.add(Mode.EDITING);
            editButton.setText("Save");
            addButton.setEnabled(false);
            deleteButton.setEnabled(false);
            changeEditable(true);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void typeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboActionPerformed
        if (!typeCombo.getSelectedItem().equals(PowerType.BASIC)) {
            periodField.setEditable(true);
        } else {
            periodField.setEditable(false);
        }
    }//GEN-LAST:event_typeComboActionPerformed

    private void delRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delRowActionPerformed
        AliasTableModel model = (AliasTableModel)aliasTable.getModel();
        model.removeAlias(aliasTable.getSelectedRow());
    }//GEN-LAST:event_delRowActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        DBEventListenerManager.getInstance().removeListener(this);
    }//GEN-LAST:event_formWindowClosed

    private javax.swing.JComboBox<String> getMediumCombo() {
        java.util.Vector<String> strs = new java.util.Vector();
        Reflections ref = new Reflections("iotc.medium");
        Set<Class<? extends iotc.medium.AbstractMedium>> classes = ref.getSubTypesOf(iotc.medium.AbstractMedium.class);
        for (Class c : classes) {
            strs.add(c.getName());
        }
        return new javax.swing.JComboBox(strs);
    }
    private void loadUsers() {
        Session s = HibernateUtil.getSessionFactory().getCurrentSession();
        s.beginTransaction();
        s.setCacheMode(CacheMode.IGNORE);
        Query q = s.getNamedQuery("User.findAll");
        List<User> users = (List<User>)q.list();
        DefaultListModel<User> model = (DefaultListModel<User>)userList.getModel();

        model.clear();
        for (User u : users) {
            model.addElement(u);
        }

        s.getTransaction().commit();

        userList.repaint();
    }
    private void changeEditable(boolean editable) {
        nameField.setEditable(editable);
        ((AliasTableModel)aliasTable.getModel()).setEditable(editable);
        powerCombo.setEnabled(editable);
        typeCombo.setEnabled(editable);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JMenuItem addRow;
    private javax.swing.JTable aliasTable;
    private javax.swing.JPopupMenu aliasTableMenu;
    private javax.swing.JTextField authField;
    private javax.swing.JMenuItem delRow;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField periodField;
    private javax.swing.JComboBox<PowerEnum> powerCombo;
    private javax.swing.JComboBox<PowerEnum> prevPowerCombo;
    private javax.swing.JComboBox<PowerType> typeCombo;
    private javax.swing.JList<User> userList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onCreate(String entityName, Object entity) {
        if (entityName.equals("User")) {
            loadUsers();
        }
    }

    @Override
    public void onDelete(String entityName, Object entity) {
        if (entityName.equals("User")) {
            loadUsers();
        }
    }

    @Override
    public void onUpdate(String entityName, Object entity) {
        if (entityName.equals("User")) {
            loadUsers();
        }
    }
}
