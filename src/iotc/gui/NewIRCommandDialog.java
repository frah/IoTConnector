package iotc.gui;

import iotc.UPnPDevices;
import iotc.db.*;
import iotc.event.DBEventListener;
import iotc.event.DBEventListenerManager;
import iotc.event.UPnPEventListener;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.hibernate.CacheMode;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.itolab.morihit.clinkx.UPnPRemoteAction;
import org.itolab.morihit.clinkx.UPnPRemoteActionArgument;
import org.itolab.morihit.clinkx.UPnPRemoteDevice;
import org.itolab.morihit.clinkx.UPnPRemoteStateVariable;

/**
 * 新しいSunSPOTを介した制御コマンドを登録するためのダイアログ
 * @author atsushi-o
 */
public class NewIRCommandDialog extends javax.swing.JDialog implements UPnPEventListener, DBEventListener {
    private UPnPRemoteStateVariable upprsv;
    private static Logger LOG = Logger.getLogger(NewIRCommandDialog.class.getName());

    /**
     * Creates new form NewIRCommandDialog
     */
    public NewIRCommandDialog(java.awt.Frame parent, boolean modal, Device d) {
        super(parent, modal);
        initComponents();

        if (d != null) {
            for (int i = 0; i < roomCombo.getItemCount(); i++) {
                if (roomCombo.getItemAt(i).getId() == d.getRoom().getId()) {
                    roomCombo.setSelectedIndex(i);
                    break;
                }
            }
            for (int i = 0; i < deviceCombo.getItemCount(); i++) {
                if (deviceCombo.getItemAt(i).getId() == d.getId()) {
                    deviceCombo.setSelectedIndex(i);
                    break;
                }
            }
        }
        UPnPDevices.getInstance().addListener(this);
        DBEventListenerManager.getInstance().addListener(this, "Room|Device");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roomCombo = new javax.swing.JComboBox<Room>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        deviceCombo = new javax.swing.JComboBox<Device>();
        deviceAddButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        sendReqButton = new javax.swing.JButton();
        comField = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        aliasField = new javax.swing.JTextField();
        powerCombo = new javax.swing.JComboBox(PowerEnum.values());
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        roomCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomComboActionPerformed(evt);
            }
        });

        jLabel1.setText("Room");

        jLabel2.setText("Device");

        deviceCombo.setEnabled(false);
        deviceCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deviceComboActionPerformed(evt);
            }
        });

        deviceAddButton.setText("Add");
        deviceAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deviceAddButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Command");

        sendReqButton.setText("Send request");
        sendReqButton.setEnabled(false);
        sendReqButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendReqButtonActionPerformed(evt);
            }
        });

        comField.setEditable(false);

        jLabel4.setText("Name");

        nameField.setEnabled(false);

        jLabel5.setText("Power");

        jLabel6.setText("Alias");

        aliasField.setEnabled(false);

        powerCombo.setEnabled(false);

        okButton.setText("OK");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sendReqButton))
                    .addComponent(comField)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(20, 20, 20)
                        .addComponent(nameField))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deviceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deviceAddButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(roomCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(aliasField)
                                    .addComponent(powerCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(okButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(roomCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(deviceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deviceAddButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sendReqButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(powerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(aliasField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        updateRoomCombo();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateRoomCombo() {
        Session s = HibernateUtil.getSessionFactory().openSession();
        s.setCacheMode(CacheMode.IGNORE);
        Query q = s.getNamedQuery("Room.findAll");

        roomCombo.removeAllItems();;
        for (Room r : (List<Room>)q.list()) {
            roomCombo.addItem(r);
        }

        s.close();
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // OKボタン押下アクション
        if (nameField.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Command name is required", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Command c = new Command();
        c.setName(nameField.getText());
        c.setPower(powerCombo.getItemAt(powerCombo.getSelectedIndex()).getId());
        c.setType(CommandType.SunSPOT.getId());
        c.setDevice(deviceCombo.getItemAt(deviceCombo.getSelectedIndex()));
        c.setAliasName(aliasField.getText());
        c.setCommand("setIRCommand("+comField.getText()+")");

        Session s = HibernateUtil.getSessionFactory().openSession();
        try {
            s.beginTransaction();
            s.save(c);
            s.getTransaction().commit();
        } catch (HibernateException ex) {
            s.getTransaction().rollback();
            LOG.log(Level.WARNING, "Add SunSPOT command failed", ex);
            JOptionPane.showMessageDialog(this, ex.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            s.close();
        }
        this.dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // キャンセルボタン押下アクション
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void deviceAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deviceAddButtonActionPerformed
        // デバイス追加ボタン押下アクション
        new NewDeviceDialog((javax.swing.JFrame)this.getParent(), true, null).setVisible(true);
        roomComboActionPerformed(null);
    }//GEN-LAST:event_deviceAddButtonActionPerformed

    private void roomComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomComboActionPerformed
        // 部屋選択時アクション
        Session s = HibernateUtil.getSessionFactory().openSession();
        Room r = roomCombo.getItemAt(roomCombo.getSelectedIndex());
        r = (Room)s.load(Room.class, r.getId());

        deviceCombo.removeAllItems();
        for (Device dev : (Set<Device>)r.getDevices()) {
            deviceCombo.addItem(dev);
        }
        s.close();
        deviceCombo.setEnabled(true);
    }//GEN-LAST:event_roomComboActionPerformed

    private void deviceComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deviceComboActionPerformed
        // デバイス選択時アクション
        sendReqButton.setEnabled(true);
    }//GEN-LAST:event_deviceComboActionPerformed

    private void sendReqButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendReqButtonActionPerformed
        // IRコマンド受信リクエスト送信ボタン押下アクション
        Session s = HibernateUtil.getSessionFactory().openSession();
        Room r = roomCombo.getItemAt(roomCombo.getSelectedIndex());
        r = (Room)s.load(Room.class, r.getId());

        Device dev = null;
        for (Iterator<Device> i = ((Set<Device>)r.getDevices()).iterator(); i.hasNext();) {
            dev = i.next();
            if (dev.getType() == DeviceType.SunSPOT.getId()) {
                break;
            }
            dev = null;
        }
        if (dev == null) {
            JOptionPane.showMessageDialog(this, "SunSPOT device not found in specified room", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            UPnPRemoteDevice upprd = EntityMapUtil.dbToUPnP(dev);
            UPnPRemoteAction uppra = upprd.getRemoteAction("SetCommand");
            java.util.List<UPnPRemoteActionArgument> inputList = uppra.getRemoteActionInputArgumentList();
            UPnPRemoteActionArgument arg = inputList.get(0);
            arg.setValue(2);
            if (!uppra.invoke()) {
                JOptionPane.showMessageDialog(this, "SunSPOT device not found in specified room", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                this.upprsv = upprd.getRemoteStateVariable("IRCommand");
                this.upprsv.subscribe();
            }
        } catch (iotc.common.UPnPException ex) {
            LOG.log(Level.WARNING, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NullPointerException ex) {
            LOG.log(Level.WARNING, null, ex);
            JOptionPane.showMessageDialog(this, "Remote action invocation failed", "Error", JOptionPane.ERROR_MESSAGE);
        }

        s.close();
    }//GEN-LAST:event_sendReqButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aliasField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField comField;
    private javax.swing.JButton deviceAddButton;
    private javax.swing.JComboBox<Device> deviceCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField nameField;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox<PowerEnum> powerCombo;
    private javax.swing.JComboBox<Room> roomCombo;
    private javax.swing.JButton sendReqButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onDetectNewDevice(UPnPRemoteDevice device) {}
    @Override
    public void onDetectKnownDevice(Device device) {}
    @Override
    public void onFailDevice(Device device) {}
    @Override
    public void onUpdateValue(UPnPRemoteStateVariable upprsv) {
        if (this.upprsv == null) return;
        if (!upprsv.getName().equals(this.upprsv.getName())) return;
        String s = (String)upprsv.getValue();
        if (s.matches("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$")) {
            comField.setText(s);
            nameField.setEnabled(true);
            powerCombo.setEnabled(true);
            aliasField.setEnabled(true);
            okButton.setEnabled(true);
            this.upprsv.unsubscribe();
        }
    }

    @Override
    public void onCreate(String entityName, Object entity) {
        updateComponent(entityName);
    }

    @Override
    public void onDelete(String entityName, Object entity) {
        updateComponent(entityName);
    }

    @Override
    public void onUpdate(String entityName, Object entity) {
        updateComponent(entityName);
    }

    private void updateComponent(String entityName) {
        switch (entityName) {
            case "Room":
                updateRoomCombo();
                break;
            case "Device":
                roomComboActionPerformed(null);
                break;
            default:
                break;
        }
    }
}
